Raport 

Write a brief report describing your work and your results as a file in your repository. Write the report as if describing
and documenting for your imaginary collaborator what you have done.

Jag började med att göra en shellscript som räknar antalet kanter vilket var 63962895. och göra tre testfiler, en med ca 10 rader, en med ca 100 och en med ca 1000 rader. 
En funktion 'read' som läser in hela filen rad för rad.  En hashmap 'identifiers' som översätter varje 
nod till ett unikt heltal och en hashmap 'nodes' med heltalsidentifierarna som nycklar och antalet grannar som värden. 
Valde att använda mig av en Hashmap eftersom den har en konstant tidskomplexitet för att kolla upp värden  O(1) 
Behövde öka heapsizen

'enoughOverlap' kollar för varje rad ifall det är tillräckligt stort överlapp i båda avsnitten för en kant och skapar en kant.
Har valt att representera grafen med en ArrayList där indexet representerar noden och på varje position finns en arraylist som innehåller antalet grannar. 
Jag övervägde att använda mig av en länkad lista istället för en arraylist. Fördelen med en
länkad lista är att det går mycket snabbare att modifiera listan eftersom ... men för en arraylist måstse allt flyttas om. arraylist dynamisk resizing 
Fördelen med en arraylist är att det går snabbare att
kolla upp ett värde i listan. Eftersom mitt program används för att spara alla noder en gång utan att modifiera dem och göra många 'lookups' så valde jag arraylistor. 

Tiden det tar att läsa in filen påverkas i hög grad av storleken på grafen. Antalet noder som kommer vara med i grafen är 11393435. 

För att skapa histogrammet har jag gjort en funktion 'histogram' som sparar antalet grannar för alla noder i en ny fil. Har också gjort ett litet program i python 
som läser in filen och från den skapar histogrammet med matplotlib.

För att beräkna antaket komponenter och cliques implementerade jag djupetförstsökning. Eftersom det
är en rekursiv funktion och mycket minne kommer då läggas på stacken när programmet körs vilket ledde till att det inte fungerade till en början. För att lösa detta 
ökade jag. Valde att använda djupetförstsökning eftersom det kändes ganska naturligt då jag skulle behöva gå igenom alla noder för att se hur de sitter ihop. Tidskomplexiteten för 
djupetförstsökning är bra, O(V+E) 

Skrev in detta i launch.json filen för att öka heap size och stack size:  "vmArgs": "-Xmx8048m -Xss515m",
Man kommer dit genom Run->Add configuration. 

 
dfsvisit
Vi besöker varje nod en gång. 

	
Antalet kanter: 63962895
Antalet komponenter (med åtminstonde tre noder): 317284
Antalet av dessa som är cliques: 35472



